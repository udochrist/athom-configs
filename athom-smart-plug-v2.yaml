substitutions:
  name: "athom-smart-plug-v2"
  friendly_name: "Smart Plug V2"
  # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc
  room: ""
  device_description: "athom smart plug v2"
  project_name: "China Athom Technology.Athom Plug V2"
  project_version: "v2.0.8"
  sensor_update_interval: "10s"
  relay_restore_mode: RESTORE_DEFAULT_ON
  # Current Limit in Amps. AU Plug = 10. IL, BR, EU, UK, US Plug = 16.
  current_limit : "16"
  # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ".local"
  # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: ""
  # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: "6h"
  # Network time servers for your region, enter from lowest to highest priority. To use local servers update as per zones or countries at: https://www.ntppool.org/zone/@
  sntp_server_1: "0.pool.ntp.org"
  sntp_server_2: "1.pool.ntp.org"
  sntp_server_3: "2.pool.ntp.org"  
  # Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken
  wifi_fast_connect: "false"
  # Define logging level: NONE, ERROR, WARN, INFO, DEBUG (Default), VERBOSE, VERY_VERBOSE
  log_level: "INFO"
  # Enable or disable the use of IPv6 networking on the device
  ipv6_enable: "false"
  # Hide the ENERGY sensor that shows kWh consumed, but with no time period associated with it. Resets when device restarted and reflashed.
  hide_energy_sensor: "false"
  # Specifies whether pins should be initialised as early as possible to known values. Recommended value is false where switches are involved, as these will toggle when updating the firmware or when restarting the device. Defaults to true.
  early_pin_init: "true"
  # Power plug icon selection. Change to reflect the type/country of powr plug in use, this will update the power plug icon shown next to the switch
  power_plug_type: "power-socket-us"  # Options: power-socket-au | power-socket-ch | power-socket-de | power-socket-eu | power-socket-fr | power-socket-it | power-socket-jp | power-socket-uk | power-socket-us |


########################## End of Substitutions #########################

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"
  name_add_mac_suffix: true
  min_version: 2024.6.0
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    board_upload.flash_size: 2MB
    board_upload.maximum_size: 2097152
    board_build.ldscript: eagle.flash.2m.ld
  on_boot:
    - priority: 600
      then:
        - select.set_index:
            id: power_mode
            index: !lambda |-
                    return id(restore_mode)-1;
        - lambda: |-
              switch(id(restore_mode))
              {
              case 1:{
                      id(relay).turn_off();
                      break;
                            }
              case 2:{
                      id(relay).turn_on();
                      break;
                            }
              default:{
                      break;
                            }
              }

esp8266:
  board: esp8285
  restore_from_flash: true
  early_pin_init: ${early_pin_init}

preferences:
  flash_write_interval: 5min

api:

ota:
  - platform: esphome

logger:
  level: ${log_level}
  baud_rate: 0

mdns:
  disabled: false

web_server:
  port: 80
#  version: 3

network:
  enable_ipv6: ${ipv6_enable}

wifi:
  # This spawns an AP with the device name and mac address with no password.
  ap: {}
  # Allow rapid re-connection to previously connect WiFi SSID, skipping scan of all SSID
  fast_connect: "${wifi_fast_connect}"
  # Define dns domain / suffix to add to hostname
  domain: "${dns_domain}"

captive_portal:

dashboard_import:
  package_import_url: github://athom-tech/athom-configs/athom-smart-plug-v2.yaml

# Dentra Components - Adds 'Platform - Energy Statistics'
# https://github.com/dentra/esphome-components/tree/master/components/energy_statistics
# external_components:
#   - source: github://dentra/esphome-components

uart:
  rx_pin: RX
  baud_rate: 4800
  parity: EVEN

globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0'
  - id: restore_mode
    type: int
    restore_value: yes
    initial_value: "2"      # 0 = Always_Off. 1 = Restore_Power_Off. 2 = Always_On.

select:
  - platform: template
    name: "Power On State"
    id: "power_mode"
    optimistic: true
    icon: mdi:electric-switch
    options:
      - Always Off
      - Always On
      - Restore Power Off State
    on_value:
      then:
        - lambda: |-
            id(restore_mode)=i+1;

binary_sensor:
  - platform: status
    name: "Status"
    icon: mdi:check-network-outline
    entity_category: diagnostic    

  - platform: gpio
    pin:
      number: 5
      mode: INPUT_PULLUP
      inverted: true
    id: power_button
    name: "Power Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset

sensor:

  # Reports the WiFi signal strength/RSSI in dB
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic

  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic
    device_class: ""

  # CSE7766 power monitoring chip
  - platform: cse7766
    id: athom_cse7766
    current:
      name: "Current"
      id: plug_current  # Added ID so we can reference this in other sensors
      icon: mdi:current-ac
      filters:
        - throttle_average: ${sensor_update_interval}
        - lambda: if (x < 0.060) return 0.0; else return x;   # For the chip will report less than 3w power when no load is connected
      on_value_range:
        - above: ${current_limit}
          then:
            - switch.turn_off: relay

    voltage:
      name: "Voltage"
      id: plug_voltage  # Added ID so we can reference this in other sensors
      icon: mdi:sine-wave
      filters:
        - throttle_average: ${sensor_update_interval}

    power:
      name: "Power"
      id: power_sensor
      icon: mdi:power
      filters:
        - throttle_average: ${sensor_update_interval}
        - lambda: if (x < 3.0) return 0.0; else return x;    # For the chip will report less than 3w power when no load is connected

    energy:
      name: "Energy"
      id: energy
      icon: mdi:lightning-bolt
      unit_of_measurement: kWh
      internal: ${hide_energy_sensor}
      filters:
        - throttle: ${sensor_update_interval}
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;
              id(total_energy_sensor).update();

    apparent_power:
      name: "Apparent Power"
      icon: mdi:power
      filters:
        - throttle_average: ${sensor_update_interval}

    reactive_power:
      name: "Reactive Power"
      icon: mdi:flash
      filters:
        - throttle_average: ${sensor_update_interval}

    power_factor:
      name: "Power Factor"
      icon: mdi:percent-outline
      filters:
        - throttle_average: ${sensor_update_interval}

  - platform: template
    name: "Total Energy"
    id: total_energy_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: mdi:lightning-bolt
    accuracy_decimals: 3
    lambda: |-
      return id(total_energy);
    update_interval: ${sensor_update_interval}

  - platform: total_daily_energy
    name: "Total Energy Since Boot"
    restore: true
    power_id: power_sensor
    unit_of_measurement: kWh
    icon: mdi:hours-24
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

  #    # Dentra Components - Define the id of the sensor providing 'Total Energy' used
  # - platform: "energy_statistics"
  #   total: total_energy_sensor

  #    # Dentra Components - Adds Energy Today. Persistents if restarted, unlike 'total_daily_energy'
  #   energy_today:
  #     name: "Energy Today"
  #     id: total_energy_today
  #     accuracy_decimals: 3
  #     icon: mdi:hours-24

  #    # Dentra Components - Adds Energy Yesterday
  #   energy_yesterday:
  #     name: "Total Energy Yesterday"
  #     id: total_energy_yesterday
  #     icon: mdi:calendar-today
  #     accuracy_decimals: 3

  #    # Dentra Components - Adds Energy Week
  #   energy_week:
  #     name: "Total Energy Week"
  #     id: total_energy_week
  #     icon: mdi:calendar-week
  #     accuracy_decimals: 3

  #    # Dentra Components - Adds Energy Month
  #   energy_month:
  #     name: "Total Energy Month"
  #     id: total_energy_month
  #     accuracy_decimals: 3
  #     icon: mdi:calendar-month

button:
  - platform: restart
    name: "Restart"
    entity_category: config

  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    entity_category: config

  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    entity_category: config

switch:
  - platform: gpio
    name: "Switch"
    pin: GPIO12
    id: relay
    restore_mode: ${relay_restore_mode}
    icon: mdi:${power_plug_type}

light:
  - platform: status_led
    name: "Status LED"
    id: blue_led
    icon: mdi:lightbulb-outline
    disabled_by_default: true
    pin:
      inverted: true
      number: GPIO13

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: mdi:ip-network
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      icon: mdi:network-pos
      entity_category: diagnostic

  #  Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
#    device_class: timestamp

  - platform: uptime
    name: "Uptime Sensor"
    entity_category: diagnostic
    update_interval: 15s
    icon: mdi:clock-start
    format:
      separator: " "

time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min to 6 hours (or as set in substitutions)
    update_interval: ${sntp_update_interval}
  # Set specific sntp servers to use
    servers: 
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"    
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
